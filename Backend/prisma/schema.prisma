generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id
  fullName           String
  email              String               
  Username           String               @unique
  password           String
  membershipStatus   Boolean              @default(false)
  levelIncome        Int                  @default(0)
  referrerId         String?
  createdAt          DateTime             @default(now())
  orderStatus        Boolean              @default(false)
  role               Role                 @default(USER)
  walletBalance      Float                @default(0)
  mobile             String?              
  address            Address[]
  BankDetails        BankDetails[]
  orders             Order[]
  resetTokens        PasswordResetToken[]
  referrer           User?                @relation("UserReferrals", fields: [referrerId], references: [id])
  referrals          User[]               @relation("UserReferrals")
  levelRewards       LevelReward[]
  userRewards        UserReward[]
  withdrawalRequests WithdrawalRequest[]
  activationCodes    ActivationCode[]
  referalTree        ReferalTree?
  transactionDetails TransactionDetails?
  requestCodeTransactionDetails RequestCodeTransactionDetails[]
}

model OTP {
  id        String   @id @default(cuid())
  email     String
  otp       String
  createdAt DateTime @default(now())
  expiresAt DateTime @default(dbgenerated("now() + interval '2 minutes'"))
}

model Address {
  id        String   @id @default(cuid())
  houseNo   String
  city      String
  state     String
  pinCode   String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Saree {
  id        String   @id @default(cuid())
  name      String
  price     Int      @default(750)
  image     String
  createdAt DateTime @default(now())
  stock     Boolean  @default(true)
  orders    Order[]
}

model Order {
  id        String   @id @default(cuid())
  userId    String
  sareeId   String
  dispatch  Boolean  @default(false)
  createdAt DateTime @default(now())
  saree     Saree    @relation(fields: [sareeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BankDetails {
  id        String   @id @default(cuid())
  accountNo String
  ifscCode  String
  BankName  String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WithdrawalRequest {
  id        String           @id @default(cuid())
  userId    String
  amount    Float
  status    WithdrawalStatus @default(PENDING)
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ActivationCode {
  id          String    @id @default(cuid())
  ownerUserID String    @default("JD00001")
  user        User      @relation(fields: [ownerUserID], references: [id], onDelete: Cascade)
  code        String    @unique
  isUsed      Boolean   @default(false)
  createdAt   DateTime  @default(now())
}

model Reward {
  id          String       @id @default(cuid())
  name        String
  reqMembers  Int
  description String
  level       Int          @unique
  amount      Float        @default(0)
  userRewards UserReward[]
}

model UserReward {
  id          String    @id @default(cuid())
  userId      String
  rewardId    String
  isClaimable Boolean   @default(false)
  isClaimed   Boolean   @default(false)
  claimDate   DateTime?
  reward      Reward    @relation(fields: [rewardId], references: [id])
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, rewardId])
}

enum Role {
  USER
  ADMIN
}

enum WithdrawalStatus {
  PENDING
  COMPLETED
  REJECTED
}

model LevelReward {
  id           String   @id @default(cuid())
  userId       String   @unique
  level1Count  Int      @default(0)
  level2Count  Int      @default(0)
  level3Count  Int      @default(0)
  level4Count  Int      @default(0)
  level5Count  Int      @default(0)
  level6Count  Int      @default(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt    DateTime @updatedAt
}

model ReferalTree {
  id        String @id @default(cuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  level1    Json?
  level2    Json?
  level3    Json?
  level4    Json?
  level5    Json?
  level6    Json?
}

model TransactionDetails {
  userId    String @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  image     String
  createdAt DateTime @default(now())
}

model RequestCodeTransactionDetails {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Float
  transactionId String
  image     String
  approved  Boolean  @default(false)
  createdAt DateTime @default(now())
}